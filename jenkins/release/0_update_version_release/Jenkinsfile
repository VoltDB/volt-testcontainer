v@Library('voltdb') _

pipeline {

    //    description 'Checkout, update version and docker repo for Volt Test Container product'

    agent {
        label 'gcloud-build--rocky-linux-8--x64'
    }

    options {
        timestamps()
        timeout(time: 30, unit: 'MINUTES')
        skipDefaultCheckout()
        disableConcurrentBuilds(abortPrevious: true)
        githubProjectProperty(projectUrlStr: 'git@github.com:VoltDB/volt-testcontainer.git')
    }

    parameters {
        string(name: 'VERSION',
               description: 'Jar container version. Empty equals no change')
    }


    stages {
        stage('Checkout') {
            steps {
                script {
                    dir('volt-testcontainer') {
                        checkoutTestContainer()
                    }
                }
            }   
            post {
                failure {
                    error('ERROR: Checkout failed')
                }
            }
        }

        stage('Setup') {
            steps {
                script {
                    dir('volt-testcontainer') {
                        NEW_BRANCH = "update-version--${params.BRANCH}--${BUILD_NUMBER}--notest"
                        sh """
                            echo PWD: $PWD
                            ls -FC .
                            git status
                            git branch -l

                            git checkout -b ${NEW_BRANCH}
                        """
                    }
                    currentBuild.displayName = "S:" + params.VERSION

                }
            }
            post {
                failure {
                    error('ERROR: Setup failed')
                }
            }
        }

        stage('Set version and docker repo') {
            steps {
                script {
                    dir('volt-testcontainer') {
                        sh "mvn versions:set -DnewVersion=${VERSION} -ntp"
                    }
                }
            }
            post {
                failure {
                    error('ERROR: Set version failed')
                }
            }
        }

        stage('commit') {
            steps {
                script {
                    dir('volt-testcontainer') {
                        sh '''
                            git diff
                            git config --local user.name "voltdbci"
                            git config --local user.email "test@voltdb.com"
                            fname=\$(mktemp commit-message.XXXXXX)
                            echo 'Jenkins VoltDB_Test_Container_UpdateVersion' > \$fname
                            echo '' >> \$fname

                            [ -n "${VERSION}" ] && echo ". set jar version to ${VERSION}" >> \$fname
                            echo '' >> \$fname
                            echo 'Co-authored-by: Jenkins CI <test@voltdb.com>' >> \$fname
                            git commit --all --file=\$fname
                        '''
                    }
                }
            }
            post {
                failure {
                    error('ERROR: commit failed')
                }
            }
        }

        stage('push') {
            steps {
                script {
                    dir('volt-testcontainer') {
                        withCredentials([usernamePassword(credentialsId: 'github-token', passwordVariable: 'token', usernameVariable: 'username')]) {
                            sh "git remote set-url origin https://${token}@github.com/VoltDB/volt-testcontainer.git"
                            def pushOutput = sh(returnStdout: true, script: "git push origin $NEW_BRANCH 2>&1")
                            def pmatch = pushOutput =~ /(?s)remote:\s+(https:.*\/VoltDB\/volt-testcontainer\/pull\S+)/
                            if (!pmatch)
                                error('git push output did not contain pull request URL')

                            currentBuild.description = '<a href="' + pmatch[0][1] + '">Create pull request</a>'
                        }
                    }
                }
            }
            post {
                failure {
                    error('ERROR: push failed')
                }
            }
        }

    }
    post {
        always {
            cleanWs()
        }
        failure {
            error('ERROR: Update release branch failed')
            // slackBuildStatus(false)
        }
    }
}
