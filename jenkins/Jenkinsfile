/*
 * Copyright (C) 2024-2025 Volt Active Data Inc.
 *
 * Use of this source code is governed by an MIT
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 */

@Library('voltdb') _
def defaultRelease = false
if (BRANCH_NAME == "main") {
    defaultRelease = true
}

pipeline {
    agent {
       label 'gcloud-build--rocky-linux-8--x64'
    }
    environment {               
       JAVA_HOME = "/opt/corretto_java17"  
    }  
    parameters {
        booleanParam(name: 'RELEASE', defaultValue: false, description: 'Whether to release to maven central')
        booleanParam(name: 'TAG_BUILD', defaultValue: false, description: 'If true tag a branch in github')
    }
    stages {
        stage('Validate version') {
            when {
                expression { !params.RELEASE }
            }
            steps {
                script {
                    def currentVersion = sh(returnStdout: true, script: "mvn help:evaluate -Dexpression=project.version -q -DforceStdout").trim()
                    echo "Building version: ${currentVersion}"

                    // Optionally validate that non-release builds use SNAPSHOT versions
                    if (!currentVersion.endsWith('-SNAPSHOT')) {
                        echo "Warning: Building non-release with non-SNAPSHOT version: ${currentVersion}"
                    }
                }
            }
        }
        stage('Tag branch') {
            when {
                expression { params.RELEASE && params.TAG_BUILD }
            }
            steps {
                script {
                    startedStage('Tag branch')
                }

                script {
                    // Get current version and remove -SNAPSHOT for tagging
                    def currentVersion = sh(returnStdout: true, script: "mvn help:evaluate -Dexpression=project.version -q -DforceStdout").trim()
                    def releaseVersion = currentVersion.replace('-SNAPSHOT', '')
                    def githubTag = 'v' + releaseVersion

                    echo "Tagging version: ${releaseVersion}"
                    echo "GitHub tag: ${githubTag}"

                    withCredentials([usernamePassword(credentialsId: 'github-token', passwordVariable: 'token', usernameVariable: 'username')]) {
                        sh """
                            git config --local user.name "voltdbci"
                            git config --local user.email "test@voltdb.com"
                            git remote set-url origin https://${token}@github.com/VoltDB/volt-testcontainer.git
                        """
                        res = sh(script: "git tag -a ${githubTag} -m 'Tagging ${githubTag} release' HEAD 2>&1", returnStdout: true)
                        if (res.contains("already exists")) {
                            error("ERROR: Build failed! $res ")
                        }
                        sh(script: "git push origin ${githubTag}", returnStdout: true)
                    }
                }
            }
            post {
                success {
                    successfulStage('Tag branch')
                }
                failure {
                    failedStage('Tag branch')
                }
            }
        }
        stage('Build and Test') {
            when {
                expression { !params.RELEASE }
            }
            steps {
                script {
                    startedStage('Build and Test')
                }
                script {
                    withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKER_CREDS_USR', passwordVariable: 'DOCKER_CREDS_PSW')]) {
                        sh '''
                            echo "login to docker..."
                            echo ${DOCKER_CREDS_PSW} | docker login -u ${DOCKER_CREDS_USR} --password-stdin docker.io
                            echo "building..."
                        '''
                    }

                    withCredentials([string(credentialsId: 'VOLTDB_LICENSE', variable: 'LICENSE')]) {
                        writeFile file: "/tmp/voltdb-license.xml", text: "$LICENSE", encoding: "UTF-8"
                    }

                    sh '''
                       mvn clean install javadoc:javadoc archetype:update-local-catalog
                    '''
                }
            }
            post {
                success {
                    successfulStage('Build and Test')
                }
                unsuccessful {
                    failedStage('Build and Test')
                }
                always {
                    junit '**/target/surefire-reports/*.xml'
                    junit '**/target/failsafe-reports/*.xml'
                }
            }
        }
        stage('Publish') {
            when {
                expression { defaultRelease || params.RELEASE }
            }
            steps {
                script {
                    startedStage('Publish')
                }
                script {
                    withCredentials([file(credentialsId: 'maven-repos-dev-write', variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) {
                        withCredentials([string(credentialsId: 'GPG_PASSPHRASE', variable: 'GPG_PASSPHRASE')]) {
                            withCredentials([string(credentialsId: 'NEXUS_USERNAME', variable: 'NEXUS_USERNAME')]) {
                                withCredentials([string(credentialsId: 'NEXUS_PASSWORD', variable: 'NEXUS_PASSWORD')]) {
                                    env.DEPLOY_PARAMS = ""
                                    if (params.RELEASE) {
                                        // Remove -SNAPSHOT for release
                                        def currentVersion = sh(returnStdout: true, script: "mvn help:evaluate -Dexpression=project.version -q -DforceStdout").trim()
                                        def releaseVersion = currentVersion.replace('-SNAPSHOT', '')
                                        sh "mvn versions:set -DnewVersion=${releaseVersion} -ntp"
                                        echo "Publishing release version: ${releaseVersion}"

                                        env.DEPLOY_PARAMS = "--settings settings.xml -P release -P ossrh"

                                        withCredentials([file(credentialsId: 'upload-maven-central-private-pgp', variable: 'private_pgp')]) {
                                            sh """#!/bin/bash -x
                                                env
                                                gpg --import --passphrase ${GPG_PASSPHRASE} --batch ${private_pgp}
                                            """
                                        }
                                    } else {
                                        def currentVersion = sh(returnStdout: true, script: "mvn help:evaluate -Dexpression=project.version -q -DforceStdout").trim()
                                        echo "Publishing snapshot version: ${currentVersion}"
                                    }
                                    sh """#!/bin/bash
                                        mvn clean javadoc:jar source:jar deploy -ntp -DskipTests $DEPLOY_PARAMS
                                    """
                                }
                            }
                        }
                    }
                }
            }
            post {
                success {
                    successfulStage('Publish')
                }
                failure {
                    failedStage('Publish')
                }
            }
        }
    }
}
